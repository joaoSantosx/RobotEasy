using System.IO;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Collections;
using OpenQA.Selenium;
using AgentCore.Components.Web.Core.Entities;
using AgentCore.Entity.Enum;
using AgentCore.Entity.Dto;
using AgentCore.Components;
using AgentCore.Entity;
using AgentCore.Util;
using System;
using System.Data;
using System.Linq;
using System.Globalization;
string coridgoRetorno = $@"RPA000";
string mensagemRetorno = $@"Processo Incompleto";
string statusRetorno = $@"#()";
string nomeRotina = $@"1 - Global";
string diretorioFinal = $@"C:\Users\USUARIO.ALBIERI.DESKTOP-2GNPNEB\OneDrive - ALBIERI E ASSOCIADOS CONSULTORIA EMPRESARIAL LTDA\Área de Trabalho\Dev\Nota do Milhão.bot\Docs\Excel";
string diretorioNFE = $@"C:\Users\USUARIO.ALBIERI.DESKTOP-2GNPNEB\OneDrive - ALBIERI E ASSOCIADOS CONSULTORIA EMPRESARIAL LTDA\Área de Trabalho\Dev\Nota do Milhão.bot\Docs\Nfe\NFSe_E_55809260_20231201_20231231.txt";
string diretorioTemp = $@"C:\Users\USUARIO.ALBIERI.DESKTOP-2GNPNEB\OneDrive - ALBIERI E ASSOCIADOS CONSULTORIA EMPRESARIAL LTDA\Área de Trabalho\Dev\Nota do Milhão.bot\Docs\Nfe\Tratada\NFEtratada.txt";
Grid ciarGridRastreabilidade;
int count;
WebAutomation abrirNavegador;
bool verificarCampoCpf;
bool verificarAcessarSistema;
WebAutomationFindElement buscarAcessarSistema;
WebAutomationFindElement buscarClicandoAqui;
WindowsAutomation selecionarJanela;
WindowsAutomationFindElement selecionarJanelaCertificado;
WindowsAutomationFindElement Element0;
WebAutomationFindElement buscarConsultaNotas;
bool verificarNfseEmitidas;
WebAutomationFindElement buscarNfseEmitidas;
WebAutomationFindElement buscarOpcoesArquivo;
WebAutomationFindElement buscarTxtTabulado;
WebAutomationFindElement buscarBotaoDownload;
List<string> buscarArquivoTxt;
WindowsFile lerTxt;
WindowsFile copiarArquivo;
List<string> buscarArquivoCsv;
InputTable lerDadosNfe;
Excel abrirExcelTemplate;
InputTable lerDadosExcelTemplate;
ResponseDto result = Response();
Start();
return result;

public void Start() {
    try { ExecuteCode.SetCurrentObject("Chamar Rotina - Global", "global"); } catch { }
    global();
    try { ExecuteCode.SetCurrentObject("Chamar Rotina - Rotina Principal", "rotinaPrincipal"); } catch { }
    rotinaPrincipal();
    try { ExecuteCode.SetCurrentObject("Chamar Rotina", "processoAlimentacaoTemplate"); } catch { }
    processoAlimentacaoTemplate();
    try { ExecuteCode.SetCurrentObject("Chamar Rotina", "validacaoDadosTemplate"); } catch { }
    validacaoDadosTemplate();
}

public void global() {
    try { ExecuteCode.SetCurrentObject("Criar Grid de rastreabilidade", "ciarGridRastreabilidade"); } catch { }
    ciarGridRastreabilidade = new Grid() {
        Name = "ciarGridRastreabilidade",
        Label = "Criar Grid de rastreabilidade",
        NameGrid = $"ciarGridRastreabilidade",
        Title = $"Grid Rastreabilidade Zig",
        Spot = $"GLOBAL",
        Clearable = false,
        Editable = false,
        Labels = new string[]{$"Status", $"Desrição", $"Rotina"},
        IdExecution = IdExecution
    }.Run();
}

public void rotinaPrincipal() {
    try { ExecuteCode.SetCurrentObject("Chamar Rotina - Abrir Navegador", "AbrirNavegador"); } catch { }
    AbrirNavegador();
    try { ExecuteCode.SetCurrentObject("Chamar Rotina - Selecionar Certificado", "selecionarCertificado"); } catch { }
    selecionarCertificado();
    try { ExecuteCode.SetCurrentObject("Chamar Rotina - Processo Nota do Milhão", "processoNotaDoMilhao"); } catch { }
    processoNotaDoMilhao();
    try { ExecuteCode.SetCurrentObject("Chamar Rotina - Validação Download Txt", "verificarDownload"); } catch { }
    verificarDownload();
    try { ExecuteCode.SetCurrentObject("Chamar Rotina - Txt para Csv", "transformarTxtparaCsv"); } catch { }
    transformarTxtparaCsv();
    try { ExecuteCode.SetCurrentObject("Chamar Rotina - Validação Txt para Csv", "validacaoConversaoTxtCsv"); } catch { }
    validacaoConversaoTxtCsv();
    try { ExecuteCode.SetCurrentObject("Chamar Rotina - Adição dados no Template", "processoAlimentacaoTemplate"); } catch { }
    processoAlimentacaoTemplate();
}

public void AbrirNavegador() {
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "coridgoRetorno"); } catch { }
    coridgoRetorno = $@"RPA000";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "mensagemRetorno"); } catch { }
    mensagemRetorno = $@"Processo Incompleto";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "statusRetorno"); } catch { }
    statusRetorno = $@"#()";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "nomeRotina"); } catch { }
    nomeRotina = $@"2 - abrir Navegador";
    try { ExecuteCode.SetCurrentObject("Laço Livre - Abrir Navegador", "lacoAbrirNavegador"); } catch { }
    count = 0;
    while (count < 3)
    {
        try {
            try { ExecuteCode.SetCurrentObject("Try/Catch", "Try/Catch"); } catch { }
            try { ExecuteCode.SetCurrentObject("Abrir Navegador - Nota do Milhão", "abrirNavegador"); } catch { }
            abrirNavegador = new WebAutomation()
            {
                Name = "abrirNavegador",
                Label = "Abrir Navegador - Nota do Milhão",
                CheckProcess = false,
                NoCaptchaAiExtension = "https://ide-download-public.s3.sa-east-1.amazonaws.com/BrowserExtensions/NoCaptchaAIMOD.crx",
                ChromeVersion = new Version("109.0.5414"),
                Arguments = new List<string> { },
                Browser = WebBrowser.Chrome,
                Url = $@"https://nfe.prefeitura.sp.gov.br/login.aspx?expirou=1",
                AnonymousGuide = true,
                MobileMode = false,
                Timeout = 60,
                MultiplesDownload = false,
                PageLoadStrategy = PageLoadStrategy.Default,
                VerifyLink = true,
                DirDownload = $@"C:\Users\USUARIO.ALBIERI.DESKTOP-2GNPNEB\OneDrive - ALBIERI E ASSOCIADOS CONSULTORIA EMPRESARIAL LTDA\Área de Trabalho\Dev\Nota do Milhão.bot\Docs\Nfe",
                DevTools = false,
            };
            abrirNavegador.Run();
            abrirNavegador.Response(out result);
    try { ExecuteCode.SetCurrentObject("Verificar se Existe - Campo CPF", "verificarCampoCpf"); } catch { }
    verificarCampoCpf = new WebAutomationFindElement(abrirNavegador) {
        Name = "verificarCampoCpf",
        Label = "Verificar se Existe - Campo CPF",
        Xpath = $"//*[@id='ctl00_body_tbCpfCnpj']",
        Timeout = 10,
        FindType = FindType.ONE,
        WebElementSearchType = WebElementSearchType.XPath
    }.Run().Exists;
    try { ExecuteCode.SetCurrentObject("Condição If - Verificar se Existe (Sucesso)", ""); } catch { }
    if (verificarCampoCpf) {
    try { ExecuteCode.SetCurrentObject("Confirmar Sucesso na Rotina", "coridgoRetorno"); } catch { }
    coridgoRetorno = $@"RPA001";
    try { ExecuteCode.SetCurrentObject("Confirmar Sucesso na Rotina", "mensagemRetorno"); } catch { }
    mensagemRetorno = $@"Site acessado";
    try { ExecuteCode.SetCurrentObject("Confirmar Sucesso na Rotina", "statusRetorno"); } catch { }
    statusRetorno = $@"#(true)";
    try { ExecuteCode.SetCurrentObject("Retorno", ""); } catch { }
    return ;
    }
    try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "coridgoRetorno"); } catch { }
    coridgoRetorno = $@"RPA002";
    try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "mensagemRetorno"); } catch { }
    mensagemRetorno = $@"Não foi possível acessar o site";
    try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "statusRetorno"); } catch { }
    statusRetorno = $@"#(false)";
    try { ExecuteCode.SetCurrentObject("Fechar Navegador", "abrirNavegador");
      abrirNavegador.Quit();
    } catch { }
        }
    catch (Exception ex) {
        try { ExecuteCode.SetCurrentObject("Catch", "ex"); } catch { }
    try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "coridgoRetorno"); } catch { }
    coridgoRetorno = $@"RPA002";
    try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "mensagemRetorno"); } catch { }
    mensagemRetorno = $@"erro na Rotina: {ex.Message}";
    try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "statusRetorno"); } catch { }
    statusRetorno = $@"#(false)";
    }
        finally {
            try { ExecuteCode.SetCurrentObject("Finally", "Finally"); } catch { }
            try { ExecuteCode.SetCurrentObject("Inserir Linha - Rastreabilidade", "ciarGridRastreabilidade"); } catch { }
            ciarGridRastreabilidade.Label = "Inserir Linha - Rastreabilidade";
            ciarGridRastreabilidade.GridPutValues($"{Guid.NewGuid().ToString()}", new string[] { $"{statusRetorno}",$"{mensagemRetorno}",$"{nomeRotina}" });
        }
        count = count + 1;
    }
}

public void selecionarCertificado() {
    try {
        try { ExecuteCode.SetCurrentObject("Try/Catch", "Try/Catch"); } catch { }
    try { ExecuteCode.SetCurrentObject("Lista de Tarefas", "listaTarefas"); } catch { }
var listaTarefas = new List<Task>();
        listaTarefas.Add(Task.Factory.StartNew(() => {
    try { ExecuteCode.SetCurrentObject("Inserir Tarefa", ""); } catch { }
    try { ExecuteCode.SetCurrentObject("Chamar Rotina - Tarefa Selecionar Certificado", "tarefaSelecionarCertificado"); } catch { }
    tarefaSelecionarCertificado();

        }));

        listaTarefas.Add(Task.Factory.StartNew(() => {
    try { ExecuteCode.SetCurrentObject("Inserir Tarefa", ""); } catch { }
    try { ExecuteCode.SetCurrentObject("Chamar Rotina - Tarefa Janela Certificado", "tarefaSelecionarJanelaCertificado"); } catch { }
    tarefaSelecionarJanelaCertificado();

        }));

Task.WaitAll(listaTarefas.ToArray());
    try { ExecuteCode.SetCurrentObject("Verificar se Existe - Validar o Acessar Sistema", "verificarAcessarSistema"); } catch { }
    verificarAcessarSistema = new WebAutomationFindElement(abrirNavegador) {
        Name = "verificarAcessarSistema",
        Label = "Verificar se Existe - Validar o Acessar Sistema",
        Xpath = $"//*[@id='ctl00_body_btAcesso']",
        Timeout = 10,
        FindType = FindType.ONE,
        WebElementSearchType = WebElementSearchType.XPath
    }.Run().Exists;
    try { ExecuteCode.SetCurrentObject("Condição If - Verificar se Existe (Sucesso)", ""); } catch { }
    if (verificarAcessarSistema) {
    try { ExecuteCode.SetCurrentObject("Buscar Elementos - Clicar Campo Acessar Sistema", "buscarAcessarSistema"); } catch { }
    buscarAcessarSistema = new WebAutomationFindElement(abrirNavegador) {
        Name = "buscarAcessarSistema",
        Label = "Buscar Elementos - Clicar Campo Acessar Sistema",
        Xpath = $"//*[@id='ctl00_body_btAcesso']",
        MinReturns = 1,
        FindType = FindType.ONE,
        Timeout = 60,
        IsPassword = false,
        WebElementSearchType = WebElementSearchType.XPath
    }.Run();
    buscarAcessarSistema.Click(0);
    try { ExecuteCode.SetCurrentObject("Confirmar Sucesso na Rotina", "coridgoRetorno"); } catch { }
    coridgoRetorno = $@"RPA001";
    try { ExecuteCode.SetCurrentObject("Confirmar Sucesso na Rotina", "mensagemRetorno"); } catch { }
    mensagemRetorno = $@"Sucesso ao selecionar certificado";
    try { ExecuteCode.SetCurrentObject("Confirmar Sucesso na Rotina", "statusRetorno"); } catch { }
    statusRetorno = $@"#(true)";
    try { ExecuteCode.SetCurrentObject("Retorno", ""); } catch { }
    return ;
    }
    try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "coridgoRetorno"); } catch { }
    coridgoRetorno = $@"RPA002";
    try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "mensagemRetorno"); } catch { }
    mensagemRetorno = $@"Não foi possível selecionar o certificado";
    try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "statusRetorno"); } catch { }
    statusRetorno = $@"#(false)";
    try { ExecuteCode.SetCurrentObject("Fechar Navegador", "abrirNavegador");
      abrirNavegador.Quit();
    } catch { }
    }
    catch (Exception ex) {
        try { ExecuteCode.SetCurrentObject("Catch", "ex"); } catch { }
    try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "coridgoRetorno"); } catch { }
    coridgoRetorno = $@"RPA002";
    try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "mensagemRetorno"); } catch { }
    mensagemRetorno = $@"erro na Rotina: {ex.Message}";
    try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "statusRetorno"); } catch { }
    statusRetorno = $@"#(false)";
    }
    finally {
        try { ExecuteCode.SetCurrentObject("Finally", "Finally"); } catch { }
            try { ExecuteCode.SetCurrentObject("Inserir Linha - Rastreabilidade", "ciarGridRastreabilidade"); } catch { }
            ciarGridRastreabilidade.Label = "Inserir Linha - Rastreabilidade";
            ciarGridRastreabilidade.GridPutValues($"{Guid.NewGuid().ToString()}", new string[] { $"{statusRetorno}",$"{mensagemRetorno}",$"{nomeRotina}" });
    }
}

public void tarefaSelecionarCertificado() {
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "coridgoRetorno"); } catch { }
    coridgoRetorno = $@"RPA000";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "mensagemRetorno"); } catch { }
    mensagemRetorno = $@"Processo Incompleto";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "statusRetorno"); } catch { }
    statusRetorno = $@"#()";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "nomeRotina"); } catch { }
    nomeRotina = $@"3.1 - Tarefa Selecionar Certificado";
    try {
        try { ExecuteCode.SetCurrentObject("Try/Catch", "Try/Catch"); } catch { }
    try { ExecuteCode.SetCurrentObject("Buscar Elementos - Clicar Botão Clicando Aqui", "buscarClicandoAqui"); } catch { }
    buscarClicandoAqui = new WebAutomationFindElement(abrirNavegador) {
        Name = "buscarClicandoAqui",
        Label = "Buscar Elementos - Clicar Botão Clicando Aqui",
        Xpath = $"//*[@id='ctl00_body_pnICP']/p/a",
        MinReturns = 1,
        FindType = FindType.ONE,
        Timeout = 60,
        IsPassword = false,
        WebElementSearchType = WebElementSearchType.XPath
    }.Run();
    buscarClicandoAqui.Click(0);
    }
    catch (Exception ex) {
        try { ExecuteCode.SetCurrentObject("Catch", "ex"); } catch { }
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "coridgoRetorno"); } catch { }
        coridgoRetorno = $@"RPA002";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "mensagemRetorno"); } catch { }
        mensagemRetorno = $@"erro na Rotina: {ex.Message}";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "statusRetorno"); } catch { }
        statusRetorno = $@"#(false)";
    }
}

public void tarefaSelecionarJanelaCertificado() {
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "coridgoRetorno"); } catch { }
    coridgoRetorno = $@"RPA000";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "mensagemRetorno"); } catch { }
    mensagemRetorno = $@"Processo Incompleto";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "statusRetorno"); } catch { }
    statusRetorno = $@"#()";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "nomeRotina"); } catch { }
    nomeRotina = $@"3.2 - Tarefa Janela Certificado";
    try {
        try { ExecuteCode.SetCurrentObject("Try/Catch", "Try/Catch"); } catch { }
    try { ExecuteCode.SetCurrentObject("Selecionar Janela - Clicar Campo Certificado ", "selecionarJanela"); } catch { }
    selecionarJanela = new WindowsAutomation()
    {
        Name = "selecionarJanela",
        Label = "Selecionar Janela - Clicar Campo Certificado ",
        Maximize = false,
        Timeout = 60,
        IsSelect = true,
        SearchTypeWindow = EnumSearchTypeWindow.Name,
        ExactlyTitle = false,
        NameWindow = $@"Selecione um certificado",
    }.Run();
    selecionarJanela.Response(out result);
        try { ExecuteCode.SetCurrentObject("Encontrar Campo - Certificado", "selecionarJanelaCertificado"); } catch { }
        var conditions367 = new List<ConditionDto>();
        conditions367.Add(new ConditionDto() { Type=WindowSearchType.XPATH, Value=$"/Custom[1]/Pane[1]/Pane[1]/Pane[2]/Pane[1]/Pane[1]/Pane[1]/List[1]/Custom[3]/DataItem[1]" });
        selecionarJanelaCertificado = new WindowsAutomationFindElement(selecionarJanela)
        {
            Name = "selecionarJanelaCertificado",
            Label = "Encontrar Campo - Certificado",
            Conditions = conditions367,
            SearchType = WindowSearchType.CONDITIONS,
            Timeout = 60,
            CleanField = false,
            FindType = FindType.ONE,
        }.Run();
        selecionarJanelaCertificado.Click(0);
        try { ExecuteCode.SetCurrentObject("Buscar elemento - Clicar Botão Ok", "Element0"); } catch { }
        var conditions484 = new List<ConditionDto>();
        conditions484.Add(new ConditionDto() { Type=WindowSearchType.XPATH, Value="/Custom[1]/Pane[1]/Pane[1]/Pane[2]/Pane[2]/Button[2]" });
        Element0 = new WindowsAutomationFindElement(selecionarJanela)
        {
            Name = "Element0",
            Label = "Buscar elemento - Clicar Botão Ok",
            Conditions = conditions484,
            SearchType = WindowSearchType.CONDITIONS,
            Timeout = 30,
            CleanField = false,
            FindType = FindType.ONE,
        }.Run();
        Element0.Click(0);
    }
    catch (Exception ex) {
        try { ExecuteCode.SetCurrentObject("Catch", "ex"); } catch { }
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "coridgoRetorno"); } catch { }
        coridgoRetorno = $@"RPA002";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "mensagemRetorno"); } catch { }
        mensagemRetorno = $@"erro na Rotina: {ex.Message}";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "statusRetorno"); } catch { }
        statusRetorno = $@"#(false)";
    }
}

public void processoNotaDoMilhao() {
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "coridgoRetorno"); } catch { }
    coridgoRetorno = $@"RPA000";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "mensagemRetorno"); } catch { }
    mensagemRetorno = $@"Processo Incompleto";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "statusRetorno"); } catch { }
    statusRetorno = $@"#()";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "nomeRotina"); } catch { }
    nomeRotina = $@"4 - Processo Nota do Milhão";
    try {
        try { ExecuteCode.SetCurrentObject("Try/Catch", "Try/Catch"); } catch { }
    try { ExecuteCode.SetCurrentObject("Buscar Elementos - Clicar Consulta de Notas", "buscarConsultaNotas"); } catch { }
    buscarConsultaNotas = new WebAutomationFindElement(abrirNavegador) {
        Name = "buscarConsultaNotas",
        Label = "Buscar Elementos - Clicar Consulta de Notas",
        Xpath = $"//*[@id='ctl00_wpMenuLateral_mnuRotinasn8']/td/table",
        MinReturns = 1,
        FindType = FindType.ONE,
        Timeout = 60,
        IsPassword = false,
        WebElementSearchType = WebElementSearchType.XPath
    }.Run();
    buscarConsultaNotas.Click(0);
    try { ExecuteCode.SetCurrentObject("Verificar se Existe - Botão Nfse emitidas", "verificarNfseEmitidas"); } catch { }
    verificarNfseEmitidas = new WebAutomationFindElement(abrirNavegador) {
        Name = "verificarNfseEmitidas",
        Label = "Verificar se Existe - Botão Nfse emitidas",
        Xpath = $"//*[@id='ctl00_body_btEmitidas']",
        Timeout = 10,
        FindType = FindType.ONE,
        WebElementSearchType = WebElementSearchType.XPath
    }.Run().Exists;
        try { ExecuteCode.SetCurrentObject("Condição If - Verificar se Existe (Sucesso)", ""); } catch { }
        if (verificarNfseEmitidas) {
    try { ExecuteCode.SetCurrentObject("Buscar Elementos - Clicar Botão Nfse Emitidas", "buscarNfseEmitidas"); } catch { }
    buscarNfseEmitidas = new WebAutomationFindElement(abrirNavegador) {
        Name = "buscarNfseEmitidas",
        Label = "Buscar Elementos - Clicar Botão Nfse Emitidas",
        Xpath = $"//*[@id='ctl00_body_btEmitidas']",
        MinReturns = 1,
        FindType = FindType.ONE,
        Timeout = 60,
        IsPassword = false,
        WebElementSearchType = WebElementSearchType.XPath
    }.Run();
    buscarNfseEmitidas.Click(0);
    AgentCore.Components.Sleep.Wait(10000);
            try { ExecuteCode.SetCurrentObject("Selecionar Janela - Planilha Nfse", "selecionarJanelaPlanilhaNfse"); } catch { }
            abrirNavegador.WindowIndex = 1;
            abrirNavegador.SelectWindow();
            try { ExecuteCode.SetCurrentObject("Buscar Elementos - Clicar Opções Arquivo", "buscarOpcoesArquivo"); } catch { }
            buscarOpcoesArquivo = new WebAutomationFindElement(abrirNavegador) {
                Name = "buscarOpcoesArquivo",
                Label = "Buscar Elementos - Clicar Opções Arquivo",
                Xpath = $"//*[@id='ctl00_cphPopUp_true_ddlTipoArquivo']",
                MinReturns = 1,
                FindType = FindType.ONE,
                Timeout = 60,
                IsPassword = false,
                WebElementSearchType = WebElementSearchType.XPath
            }.Run();
            buscarOpcoesArquivo.Response(out result);
            if (result.code != "RPA001")
            {
                return;
            }
            buscarOpcoesArquivo.Click(0);
            try { ExecuteCode.SetCurrentObject("Buscar Elementos - Clicar Opção Txt Tabulado", "buscarTxtTabulado"); } catch { }
            buscarTxtTabulado = new WebAutomationFindElement(abrirNavegador) {
                Name = "buscarTxtTabulado",
                Label = "Buscar Elementos - Clicar Opção Txt Tabulado",
                Xpath = $"//*[@id='ctl00_cphPopUp_true_ddlTipoArquivo']/option[2]",
                MinReturns = 1,
                FindType = FindType.ONE,
                Timeout = 60,
                IsPassword = false,
                WebElementSearchType = WebElementSearchType.XPath
            }.Run();
            buscarTxtTabulado.Response(out result);
            if (result.code != "RPA001")
            {
                return;
            }
            buscarTxtTabulado.Click(0);
    try { ExecuteCode.SetCurrentObject("Buscar Elementos -  Clicar Botão Download", "buscarBotaoDownload"); } catch { }
    buscarBotaoDownload = new WebAutomationFindElement(abrirNavegador) {
        Name = "buscarBotaoDownload",
        Label = "Buscar Elementos -  Clicar Botão Download",
        Xpath = $"//*[@id='ctl00_cphPopUp_true_btGerar']",
        MinReturns = 1,
        FindType = FindType.ONE,
        Timeout = 60,
        IsPassword = false,
        WebElementSearchType = WebElementSearchType.XPath
    }.Run();
    buscarBotaoDownload.Click(0);
            try { ExecuteCode.SetCurrentObject("Confirmar Sucesso na Rotina", "coridgoRetorno"); } catch { }
            coridgoRetorno = $@"RPA001";
            try { ExecuteCode.SetCurrentObject("Confirmar Sucesso na Rotina", "mensagemRetorno"); } catch { }
            mensagemRetorno = $@"Sucesso ao clicar botão download";
            try { ExecuteCode.SetCurrentObject("Confirmar Sucesso na Rotina", "statusRetorno"); } catch { }
            statusRetorno = $@"#(true)";
    try { ExecuteCode.SetCurrentObject("Retorno", ""); } catch { }
    return ;
        }
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "coridgoRetorno"); } catch { }
        coridgoRetorno = $@"RPA002";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "mensagemRetorno"); } catch { }
        mensagemRetorno = $@"Não foi possível encontrar o Xpath de download";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "statusRetorno"); } catch { }
        statusRetorno = $@"#(false)";
    try { ExecuteCode.SetCurrentObject("Fechar Navegador", "abrirNavegador");
      abrirNavegador.Quit();
    } catch { }
    }
    catch (Exception ex) {
        try { ExecuteCode.SetCurrentObject("Catch", "ex"); } catch { }
    try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "coridgoRetorno"); } catch { }
    coridgoRetorno = $@"RPA002";
    try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "mensagemRetorno"); } catch { }
    mensagemRetorno = $@"erro na Rotina: {ex.Message}";
    try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "statusRetorno"); } catch { }
    statusRetorno = $@"#(false)";
    }
    finally {
        try { ExecuteCode.SetCurrentObject("Finally", "Finally"); } catch { }
            try { ExecuteCode.SetCurrentObject("Inserir Linha - Rastreabilidade", "ciarGridRastreabilidade"); } catch { }
            ciarGridRastreabilidade.Label = "Inserir Linha - Rastreabilidade";
            ciarGridRastreabilidade.GridPutValues($"{Guid.NewGuid().ToString()}", new string[] { $"{statusRetorno}",$"{mensagemRetorno}",$"{nomeRotina}" });
    }
}

public void verificarDownload() {
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "coridgoRetorno"); } catch { }
    coridgoRetorno = $@"RPA000";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "mensagemRetorno"); } catch { }
    mensagemRetorno = $@"Processo Incompleto";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "statusRetorno"); } catch { }
    statusRetorno = $@"#()";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "nomeRotina"); } catch { }
    nomeRotina = $@"5 - Validação Download";
    try {
        try { ExecuteCode.SetCurrentObject("Try/Catch", "Try/Catch"); } catch { }
        DateTime startTimeout340 = DateTime.Now;
        do
        {
            try { ExecuteCode.SetCurrentObject("Buscar Arquivos", "buscarArquivoTxt"); } catch { }
            buscarArquivoTxt = new WindowsFile {
                Name = "buscarArquivoTxt",
                Label = "Buscar Arquivos"
            }.SearchFiles($@"C:\Users\USUARIO.ALBIERI.DESKTOP-2GNPNEB\OneDrive - ALBIERI E ASSOCIADOS CONSULTORIA EMPRESARIAL LTDA\Área de Trabalho\Dev\Nota do Milhão.bot\Docs\Nfe", new string[] { $".txt" }, false).Result;
            try { ExecuteCode.SetCurrentObject("Condição If", ""); } catch { }
            if (buscarArquivoTxt.Count > 0) {
                try { ExecuteCode.SetCurrentObject("Confirmar Sucesso na Rotina", "coridgoRetorno"); } catch { }
                coridgoRetorno = $@"RPA001";
                try { ExecuteCode.SetCurrentObject("Confirmar Sucesso na Rotina", "mensagemRetorno"); } catch { }
                mensagemRetorno = $@"Arquivo Txt baixado";
                try { ExecuteCode.SetCurrentObject("Confirmar Sucesso na Rotina", "statusRetorno"); } catch { }
                statusRetorno = $@"#(true)";
    try { ExecuteCode.SetCurrentObject("Fechar Navegador", "abrirNavegador");
      abrirNavegador.Quit();
    } catch { }
    try { ExecuteCode.SetCurrentObject("Sair do Laço", ""); } catch { }
    break;
            }
        } while (true && DateTime.Now.Subtract(startTimeout340).TotalSeconds < 10);
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "coridgoRetorno"); } catch { }
        coridgoRetorno = $@"RPA002";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "mensagemRetorno"); } catch { }
        mensagemRetorno = $@"Não foi possível baixar o Txt";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "statusRetorno"); } catch { }
        statusRetorno = $@"#(false)";
        try { ExecuteCode.SetCurrentObject("Fechar Navegador", "abrirNavegador");
      abrirNavegador.Quit();
    } catch { }
    }
    catch (Exception ex) {
        try { ExecuteCode.SetCurrentObject("Catch", "ex"); } catch { }
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "coridgoRetorno"); } catch { }
        coridgoRetorno = $@"RPA002";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "mensagemRetorno"); } catch { }
        mensagemRetorno = $@"erro na Rotina: {ex.Message}";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "statusRetorno"); } catch { }
        statusRetorno = $@"#(false)";
    }
    finally {
        try { ExecuteCode.SetCurrentObject("Finally", "Finally"); } catch { }
            try { ExecuteCode.SetCurrentObject("Inserir Linha - Rastreabilidade", "ciarGridRastreabilidade"); } catch { }
            ciarGridRastreabilidade.Label = "Inserir Linha - Rastreabilidade";
            ciarGridRastreabilidade.GridPutValues($"{Guid.NewGuid().ToString()}", new string[] { $"{statusRetorno}",$"{mensagemRetorno}",$"{nomeRotina}" });
    }
}

public void transformarTxtparaCsv() {
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "coridgoRetorno"); } catch { }
    coridgoRetorno = $@"RPA000";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "mensagemRetorno"); } catch { }
    mensagemRetorno = $@"Processo Incompleto";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "statusRetorno"); } catch { }
    statusRetorno = $@"#()";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "nomeRotina"); } catch { }
    nomeRotina = $@"5.1 - Txt para Csv";
    try {
        try { ExecuteCode.SetCurrentObject("Try/Catch", "Try/Catch"); } catch { }
    try { ExecuteCode.SetCurrentObject("Código Livre - Troca a forma de leitura para UTF8", "Criado pelo desenvolvedor"); } catch { }
    var lerTXT = File.ReadAllText($@"{diretorioNFE}", Encoding.GetEncoding("iso-8859-1"));
     
    System.IO.File.WriteAllText($@"{diretorioTemp}", lerTXT, System.Text.Encoding.UTF8);
    try { ExecuteCode.SetCurrentObject("Ler Dados Texto", "lerTxt"); } catch { }
    lerTxt = new WindowsFile()
    {
        Name = "lerTxt",
        Label = "Ler Dados Texto",
        FormatHeader = false,
        Path = $@"{diretorioTemp}",
        Encoding = EncodingFile.UTF8,
    }.Import();
    try { ExecuteCode.SetCurrentObject("Código Livre - Replace nos TAB para Ponto e vírgula", "Criado pelo desenvolvedor"); } catch { }
    lerTxt.SearchAndReplace("	", ";");
        try { ExecuteCode.SetCurrentObject("Copiar Arquivo", "copiarArquivo"); } catch { }
        copiarArquivo = new WindowsFile()
        {
            Name = "copiarArquivo",
            Label = "Copiar Arquivo",
            Path = $@"{diretorioTemp}",
            Overwrite = false,
            NewFile = $@"C:\Users\USUARIO.ALBIERI.DESKTOP-2GNPNEB\OneDrive - ALBIERI E ASSOCIADOS CONSULTORIA EMPRESARIAL LTDA\Área de Trabalho\Dev\Nota do Milhão.bot\Docs\Excel\resultadoNFE.csv"
        }.Copy();
    }
    catch (Exception ex) {
        try { ExecuteCode.SetCurrentObject("Catch", "ex"); } catch { }
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "coridgoRetorno"); } catch { }
        coridgoRetorno = $@"RPA002";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "mensagemRetorno"); } catch { }
        mensagemRetorno = $@"erro na Rotina: {ex.Message}";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "statusRetorno"); } catch { }
        statusRetorno = $@"#(false)";
    }
    finally {
        try { ExecuteCode.SetCurrentObject("Finally", "Finally"); } catch { }
            try { ExecuteCode.SetCurrentObject("Inserir Linha - Rastreabilidade", "ciarGridRastreabilidade"); } catch { }
            ciarGridRastreabilidade.Label = "Inserir Linha - Rastreabilidade";
            ciarGridRastreabilidade.GridPutValues($"{Guid.NewGuid().ToString()}", new string[] { $"{statusRetorno}",$"{mensagemRetorno}",$"{nomeRotina}" });
    }
}

public void validacaoConversaoTxtCsv() {
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "coridgoRetorno"); } catch { }
    coridgoRetorno = $@"RPA000";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "mensagemRetorno"); } catch { }
    mensagemRetorno = $@"Processo Incompleto";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "statusRetorno"); } catch { }
    statusRetorno = $@"#()";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "nomeRotina"); } catch { }
    nomeRotina = $@"5.2 - Validação Txt para Csv";
    try {
        try { ExecuteCode.SetCurrentObject("Try/Catch", "Try/Catch"); } catch { }
        DateTime startTimeout461 = DateTime.Now;
        do
        {
            try { ExecuteCode.SetCurrentObject("Buscar Arquivos", "buscarArquivoCsv"); } catch { }
            buscarArquivoCsv = new WindowsFile {
                Name = "buscarArquivoCsv",
                Label = "Buscar Arquivos"
            }.SearchFiles($@"C:\Users\USUARIO.ALBIERI.DESKTOP-2GNPNEB\OneDrive - ALBIERI E ASSOCIADOS CONSULTORIA EMPRESARIAL LTDA\Área de Trabalho\Dev\Nota do Milhão.bot\Docs\Excel", new string[] { $".csv" }, false).Result;
            try { ExecuteCode.SetCurrentObject("Condição If", ""); } catch { }
            if (buscarArquivoCsv.Count > 0) {
                try { ExecuteCode.SetCurrentObject("Confirmar Sucesso na Rotina", "coridgoRetorno"); } catch { }
                coridgoRetorno = $@"RPA001";
                try { ExecuteCode.SetCurrentObject("Confirmar Sucesso na Rotina", "mensagemRetorno"); } catch { }
                mensagemRetorno = $@"Arquivo convertido para Csv";
                try { ExecuteCode.SetCurrentObject("Confirmar Sucesso na Rotina", "statusRetorno"); } catch { }
                statusRetorno = $@"#(true)";
    try { ExecuteCode.SetCurrentObject("Sair do Laço", ""); } catch { }
    break;
            }
        } while (true && DateTime.Now.Subtract(startTimeout461).TotalSeconds < 10);
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "coridgoRetorno"); } catch { }
        coridgoRetorno = $@"RPA002";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "mensagemRetorno"); } catch { }
        mensagemRetorno = $@"Não foi possível converter o Txt";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "statusRetorno"); } catch { }
        statusRetorno = $@"#(false)";
    }
    catch (Exception ex) {
        try { ExecuteCode.SetCurrentObject("Catch", "ex"); } catch { }
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "coridgoRetorno"); } catch { }
        coridgoRetorno = $@"RPA002";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "mensagemRetorno"); } catch { }
        mensagemRetorno = $@"erro na Rotina: {ex.Message}";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "statusRetorno"); } catch { }
        statusRetorno = $@"#(false)";
    }
    finally {
        try { ExecuteCode.SetCurrentObject("Finally", "Finally"); } catch { }
            try { ExecuteCode.SetCurrentObject("Inserir Linha - Rastreabilidade", "ciarGridRastreabilidade"); } catch { }
            ciarGridRastreabilidade.Label = "Inserir Linha - Rastreabilidade";
            ciarGridRastreabilidade.GridPutValues($"{Guid.NewGuid().ToString()}", new string[] { $"{statusRetorno}",$"{mensagemRetorno}",$"{nomeRotina}" });
    }
}

public void processoAlimentacaoTemplate() {
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "coridgoRetorno"); } catch { }
    coridgoRetorno = $@"RPA000";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "mensagemRetorno"); } catch { }
    mensagemRetorno = $@"Processo Incompleto";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "statusRetorno"); } catch { }
    statusRetorno = $@"#()";
    try { ExecuteCode.SetCurrentObject("Resetar Variáveis de Rotina", "nomeRotina"); } catch { }
    nomeRotina = $@"6 - Processo Csv para Excel";
    try {
        try { ExecuteCode.SetCurrentObject("Try/Catch", "Try/Catch"); } catch { }
        try { ExecuteCode.SetCurrentObject("Ler Dados CSV Nfe", "lerDadosNfe"); } catch { }
        lerDadosNfe = new WindowsFile()
        {
            Name = "lerDadosNfe",
            Label = "Ler Dados CSV Nfe",
            FormatHeader = true,
            Path = $@"C:\Users\USUARIO.ALBIERI.DESKTOP-2GNPNEB\OneDrive - ALBIERI E ASSOCIADOS CONSULTORIA EMPRESARIAL LTDA\Área de Trabalho\Dev\Nota do Milhão.bot\Docs\Excel\resultadoNFE.csv",
            Encoding = EncodingFile.UTF8,
            ReturnListOfLines = true,
            HeaderOnFirstLine = true,
            Delimiter = $@";",
            TypeReadInitialLine = 0,
            TypeReadEndLine = 0,
            StartValueToRead = $@"-1",
            EndValueToRead = $@"-1",
            SelectInitLine = ReadOptionFiles.Start,
            SelectEndLine = ReadOptionFiles.Start,
            TipoLista = EnumReturnType.InputTable,
        }.Import().Result;
        try { ExecuteCode.SetCurrentObject("Abrir Excel - Template", "abrirExcelTemplate"); } catch { }
        abrirExcelTemplate = new Excel()
        {
            Name = "abrirExcelTemplate",
            Label = "Abrir Excel - Template",
            Path = $@"C:\Users\USUARIO.ALBIERI.DESKTOP-2GNPNEB\OneDrive - ALBIERI E ASSOCIADOS CONSULTORIA EMPRESARIAL LTDA\Área de Trabalho\Dev\Nota do Milhão.bot\Docs\Template\Prestados Clicksign.xlsx",
            Password = $"",
            BackgroundProcess = false,
            ReadOnOpen = false,
        }.Open();
        try { ExecuteCode.SetCurrentObject("Varrer Dados Excel", "varrerDadosExcelNfse"); } catch { }
        count = 0;
        foreach (DataRow varrerDadosExcelNfse in InputTable.GetEnumerable((DataTable)lerDadosNfe.Result))
        {
            try { ExecuteCode.SetCurrentObject("Manipular Dados Csv paraTemplate", "abrirExcelTemplate"); } catch { }
            abrirExcelTemplate.SetValue($"{count+2}", $"A", $"{varrerDadosExcelNfse[1]}", ExcelDataType.Default);
            abrirExcelTemplate.SetValue($"{count+2}", $"B", $"{varrerDadosExcelNfse[3]}", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"C", $"{varrerDadosExcelNfse[5]}", ExcelDataType.Number);
            abrirExcelTemplate.SetValue($"{count+2}", $"D", $"{varrerDadosExcelNfse[7]}", ExcelDataType.Date);
            abrirExcelTemplate.SetValue($"{count+2}", $"E", $"{varrerDadosExcelNfse[28]}", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"F", $"{varrerDadosExcelNfse[26].ToString().Replace(",",".")}", ExcelDataType.Default);
            abrirExcelTemplate.SetValue($"{count+2}", $"G", $"0", ExcelDataType.Number);
            abrirExcelTemplate.SetValue($"{count+2}", $"H", $"{varrerDadosExcelNfse[30].ToString().Replace(",",".")}", ExcelDataType.Default);
            abrirExcelTemplate.SetValue($"{count+2}", $"I", $"0", ExcelDataType.Number);
            abrirExcelTemplate.SetValue($"{count+2}", $"J", $"0", ExcelDataType.Number);
            abrirExcelTemplate.SetValue($"{count+2}", $"K", $"0", ExcelDataType.Number);
            abrirExcelTemplate.SetValue($"{count+2}", $"L", $"0", ExcelDataType.Number);
            abrirExcelTemplate.SetValue($"{count+2}", $"M", $"0", ExcelDataType.Number);
            abrirExcelTemplate.SetValue($"{count+2}", $"N", $"0", ExcelDataType.Number);
            abrirExcelTemplate.SetValue($"{count+2}", $"O", $"0", ExcelDataType.Number);
            abrirExcelTemplate.SetValue($"{count+2}", $"P", $"{varrerDadosExcelNfse[72]}", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"Q", $"26356125000142", ExcelDataType.Number);
            abrirExcelTemplate.SetValue($"{count+2}", $"R", $"55809260", ExcelDataType.Number);
            abrirExcelTemplate.SetValue($"{count+2}", $"S", $"ZIG TECNOLOGIA S.A.", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"T", $"NULL", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"U", $"SP", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"W", $"3550308", ExcelDataType.Number);
            abrirExcelTemplate.SetValue($"{count+2}", $"X", $"3550308", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"Y", $"{varrerDadosExcelNfse[34].ToString().Replace(".","").Replace("/","").Replace("-","")}", ExcelDataType.Number);
            abrirExcelTemplate.SetValue($"{count+2}", $"Z", $"{varrerDadosExcelNfse[35]}", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"AA", $"{varrerDadosExcelNfse[37]}", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"AB", $"{varrerDadosExcelNfse[37]}", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"AC", $"NULL", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"AD", $"{varrerDadosExcelNfse[43]}", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"AE", $"{varrerDadosExcelNfse[42]}", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"AF", $"{varrerDadosExcelNfse[45]}", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"AG", $"{varrerDadosExcelNfse[41]}", ExcelDataType.Default);
            abrirExcelTemplate.SetValue($"{count+2}", $"AH", $"105", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"AI", $"São Paulo", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"AJ", $"AV", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"AK", $"Andar 6", ExcelDataType.Default);
            abrirExcelTemplate.SetValue($"{count+2}", $"AL", $"1", ExcelDataType.Default);
            abrirExcelTemplate.SetValue($"{count+2}", $"AM", $"{varrerDadosExcelNfse[26].ToString().Replace(",",".")}", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"AN", $"{varrerDadosExcelNfse[30].ToString().Replace(",",".")}", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"AO", $"{varrerDadosExcelNfse[29]}", ExcelDataType.Text);
            abrirExcelTemplate.SetValue($"{count+2}", $"AP", $"NULL", ExcelDataType.Text);
            count = count + 1;
        }
        try { ExecuteCode.SetCurrentObject("Chamar Rotina", "validacaoDadosTemplate"); } catch { }
        validacaoDadosTemplate();
    }
    catch (Exception ex) {
        try { ExecuteCode.SetCurrentObject("Catch", "ex"); } catch { }
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "coridgoRetorno"); } catch { }
        coridgoRetorno = $@"RPA002";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "mensagemRetorno"); } catch { }
        mensagemRetorno = $@"erro na Rotina: {ex.Message}";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "statusRetorno"); } catch { }
        statusRetorno = $@"#(false)";
    }
    finally {
        try { ExecuteCode.SetCurrentObject("Finally", "Finally"); } catch { }
            try { ExecuteCode.SetCurrentObject("Inserir Linha - Rastreabilidade", "ciarGridRastreabilidade"); } catch { }
            ciarGridRastreabilidade.Label = "Inserir Linha - Rastreabilidade";
            ciarGridRastreabilidade.GridPutValues($"{Guid.NewGuid().ToString()}", new string[] { $"{statusRetorno}",$"{mensagemRetorno}",$"{nomeRotina}" });
    }
}

public void validacaoDadosTemplate() {
    try {
        try { ExecuteCode.SetCurrentObject("Try/Catch", "Try/Catch"); } catch { }
        try { ExecuteCode.SetCurrentObject("Ler Dados Excel", "abrirExcelTemplate"); } catch { }
        abrirExcelTemplate.Label = "Ler Dados Excel";
        abrirExcelTemplate.ReadReturnType = EnumReturnType.InputTable;
        lerDadosExcelTemplate = abrirExcelTemplate.ReadExcelRange(1, $@"A", 0, $@"A", true, false, ExcelReadEmptyRow.Skip).Result;
        try { ExecuteCode.SetCurrentObject("Varrer Dados Excel - Template", "varrerDadosExcelTemplate"); } catch { }
        count = 0;
        foreach (DataRow varrerDadosExcelTemplate in InputTable.GetEnumerable((DataTable)lerDadosExcelTemplate.Result))
        {
            try { ExecuteCode.SetCurrentObject("Varrer Dados Excel Validação", "varrerDadosValidacao"); } catch { }
            count = 0;
            foreach (DataRow varrerDadosValidacao in InputTable.GetEnumerable((DataTable)lerDadosNfe.Result))
            {
                try { ExecuteCode.SetCurrentObject("Condição If- Validar Dados", ""); } catch { }
                if (lerDadosExcelTemplate == lerDadosNfe) {
                    try { ExecuteCode.SetCurrentObject("Caixa de Mensagem", "Caixa de Mensagem"); } catch { }
                    new AgentCore.Components.Global.Screen.Message() {
                        Label = "Caixa de Mensagem",
                        Text = $"validado"
                    }.Run();
                    try { ExecuteCode.SetCurrentObject("Fechar Excel", "abrirExcelTemplate"); } catch { }
                    abrirExcelTemplate.Label = "Fechar Excel";
                    abrirExcelTemplate.CloseExcel(false);
                }
                count = count + 1;
            }
            count = count + 1;
        }
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "coridgoRetorno"); } catch { }
        coridgoRetorno = $@"RPA002";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "mensagemRetorno"); } catch { }
        mensagemRetorno = $@"Erro ao validar informações Template";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "statusRetorno"); } catch { }
        statusRetorno = $@"#(false)";
    }
    catch (Exception ex) {
        try { ExecuteCode.SetCurrentObject("Catch", "ex"); } catch { }
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "coridgoRetorno"); } catch { }
        coridgoRetorno = $@"RPA002";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "mensagemRetorno"); } catch { }
        mensagemRetorno = $@"erro na Rotina: {ex.Message}";
        try { ExecuteCode.SetCurrentObject("Confirmar Erro na Rotina", "statusRetorno"); } catch { }
        statusRetorno = $@"#(false)";
    }
    finally {
        try { ExecuteCode.SetCurrentObject("Finally", "Finally"); } catch { }
            try { ExecuteCode.SetCurrentObject("Inserir Linha - Rastreabilidade", "ciarGridRastreabilidade"); } catch { }
            ciarGridRastreabilidade.Label = "Inserir Linha - Rastreabilidade";
            ciarGridRastreabilidade.GridPutValues($"{Guid.NewGuid().ToString()}", new string[] { $"{statusRetorno}",$"{mensagemRetorno}",$"{nomeRotina}" });
    }
}

